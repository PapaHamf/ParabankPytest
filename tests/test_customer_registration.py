import pytest
import allure

from utils.baseclass import BaseClass
from pageobjects.homepage import HomePage
from pageobjects.basepage import BasePage
from pageobjects.sidemenu import SideMenu

class TestRegistration(BaseClass):

    ALLURE_DIR = "../allure-results/"

    @allure.parent_suite("Tests for Parabank application")
    @allure.suite("New user registration")
    @allure.sub_suite("TC 001-010")
    @allure.tag("Negative", "Smoke", "Registration")
    @allure.severity(allure.severity_level.CRITICAL)
    @allure.label("owner", "Parasoft")
    @pytest.mark.smoke
    def test_registration_negative(self, get_customer_data_negative):
        """
        Tests the customer registration w/ one empty field.
        :param get_customer_data_negative: Data generated by faker
        :return:
        """
        log = self.get_logger()
        self.driver.get(BasePage.HOME_PAGE)
        home_page = HomePage(self.driver)
        register_page = home_page.get_register_link()
        log.info(f"Testing the registration with empty {get_customer_data_negative["empty"]} field.")
        allure.dynamic.testcase(f"Test Case no {get_customer_data_negative["tc"]}")
        allure.dynamic.description(f"This test attempts to register the customer with empty"
                                   f" {get_customer_data_negative["empty"]} field.")
        first_name = get_customer_data_negative["firstname"]
        log.info(f"Entering the first name: {first_name}")
        register_page.get_first_name().send_keys(first_name)
        last_name = get_customer_data_negative["lastname"]
        log.info(f"Entering the last name: {last_name}")
        register_page.get_last_name().send_keys(last_name)
        address = get_customer_data_negative["address"]
        log.info(f"Entering the address: {address}")
        register_page.get_address_street().send_keys(address)
        city = get_customer_data_negative["city"]
        log.info(f"Entering the city: {city}")
        register_page.get_address_city().send_keys(city)
        state = get_customer_data_negative["state"]
        log.info(f"Entering the state: {state}")
        register_page.get_address_state().send_keys(state)
        post_code = get_customer_data_negative["postcode"]
        log.info(f"Entering the post code: {post_code}")
        register_page.get_address_post_code().send_keys(post_code)
        phone_number = get_customer_data_negative["phonenumber"]
        log.info(f"Entering the phone number: {phone_number}")
        register_page.get_phone_number().send_keys(phone_number)
        ssn = get_customer_data_negative["ssn"]
        log.info(f"Entering the PESEL: {ssn}")
        register_page.get_social_security_number().send_keys(ssn)
        user_name = get_customer_data_negative["username"]
        log.info(f"Entering the user name: {user_name}")
        register_page.get_username().send_keys(user_name)
        password = get_customer_data_negative["password"]
        log.info(f"Entering the password: {password}")
        register_page.get_password().send_keys(password)
        confirm_password = get_customer_data_negative["confirm"]
        log.info(f"Entering the confirm password: {confirm_password}")
        register_page.get_confirm_password().send_keys(confirm_password)
        log.info("Clicking the register button.")
        register_page.get_register_button().click()
        # The letter "รณ" throws an exception w/ HTTP Status 400
        with allure.step("Step 1: Verify the page title"):
            log.info("Verifying the proper page title.")
            assert register_page.get_page_title() == register_page.VALID_PAGE_TITLE_NEGATIVE
        with allure.step("Step 2: Verify the registration"):
            errors_list = register_page.get_errors()
            log.info("Verifying the number of errors on the page. Should equal 1.")
            assert len(errors_list) == 1
            log.info(f"Verifying the proper error type. Should be {get_customer_data_negative["empty"]}")
            assert errors_list[0] == get_customer_data_negative["empty"] + register_page.ERROR_REQUIRED_MSG

    @allure.parent_suite("Tests for Parabank application")
    @allure.suite("New user registration")
    @allure.sub_suite("TC 011-015")
    @allure.tag("Positive", "Smoke", "Registration")
    @allure.severity(allure.severity_level.CRITICAL)
    @allure.label("owner", "Parasoft")
    @pytest.mark.smoke
    def test_registration_positive(self, get_customer_data_positive):
        """
        Tests the customer registration w/ all fields w/ proper values.
        :param get_customer_data_positive: Data generated by faker.
        :return:
        """
        log = self.get_logger()
        self.driver.get(BasePage.HOME_PAGE)
        home_page = HomePage(self.driver)
        register_page = home_page.get_register_link()
        log.info(f"Testing the registration with all fields with proper values.")
        allure.dynamic.testcase(f"Test Case no {get_customer_data_positive["tc"]}")
        allure.dynamic.description(f"This test attempts to register the customer with all"
                                   f" fields with proper values.")
        first_name = get_customer_data_positive["firstname"]
        log.info(f"Entering the first name: {first_name}")
        register_page.get_first_name().send_keys(first_name)
        last_name = get_customer_data_positive["lastname"]
        log.info(f"Entering the last name: {last_name}")
        register_page.get_last_name().send_keys(last_name)
        address = get_customer_data_positive["address"]
        log.info(f"Entering the address: {address}")
        register_page.get_address_street().send_keys(address)
        city = get_customer_data_positive["city"]
        log.info(f"Entering the city: {city}")
        register_page.get_address_city().send_keys(city)
        state = get_customer_data_positive["state"]
        log.info(f"Entering the state: {state}")
        register_page.get_address_state().send_keys(state)
        post_code = get_customer_data_positive["postcode"]
        log.info(f"Entering the post code: {post_code}")
        register_page.get_address_post_code().send_keys(post_code)
        phone_number = get_customer_data_positive["phonenumber"]
        log.info(f"Entering the phone number: {phone_number}")
        register_page.get_phone_number().send_keys(phone_number)
        ssn = get_customer_data_positive["ssn"]
        log.info(f"Entering the PESEL: {ssn}")
        register_page.get_social_security_number().send_keys(ssn)
        user_name = get_customer_data_positive["username"]
        log.info(f"Entering the user name: {user_name}")
        register_page.get_username().send_keys(user_name)
        password = get_customer_data_positive["password"]
        log.info(f"Entering the password: {password}")
        register_page.get_password().send_keys(password)
        confirm_password = get_customer_data_positive["confirm"]
        log.info(f"Entering the confirm password: {confirm_password}")
        register_page.get_confirm_password().send_keys(confirm_password)
        log.info("Clicking the register button.")
        register_page.get_register_button().click()
        # The letter "รณ" throws an exception w/ HTTP Status 400
        with allure.step("Step 1: Verify the page title"):
            log.info("Verifying the page title.")
            assert register_page.get_page_title() == register_page.VALID_PAGE_TITLE_POSITIVE
        with allure.step("Step 2: Verify if the user is logged in."):
            log.info("Verifying if the user is logged in.")
            logged_msg = register_page.get_successful_registration().text.split(" ")
            assert logged_msg[1] == get_customer_data_positive["username"]
            side_menu = SideMenu(self.driver)
            log.info(f"Logging out the user {get_customer_data_positive["username"]}.")
            side_menu.get_log_out_link().click()
            self.driver.delete_all_cookies()