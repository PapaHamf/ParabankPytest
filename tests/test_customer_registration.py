import time
import pytest
import random
import allure

from utils.baseclass import BaseClass
from utils.exceldata import ExcelData
from utils.myfaker import MyFaker
from pageobjects.homepage import HomePage
from pageobjects.sidemenu import SideMenu
from pageobjects.basepage import BasePage

class TestRegistration(BaseClass):

    @pytest.fixture(scope = "function")
    @allure.title("Logging in/out the user")
    def login_logout(self) -> list:
        """
        Logins the user in the app and logs him out after the test.
        :return: List containing the dict w/ the home page object and user data.
        """
        with allure.step("Step 1: Logging in"):
            self._log = self.get_logger()
            self.driver.get(BasePage.HOMEPAGE)
            # Get the user data from Excel file
            user_data = random.choice(ExcelData.get_excel_data("test_usernames.xlsx"))
            user_name = user_data["username"]
            password = user_data["password"]
            self._log.info("Logging the user.")
            # Create the home page object
            home_page = HomePage(self.driver)
            self._log.info(f"User name: {user_name}")
            home_page.get_username().send_keys(user_name)
            self._log.info(f"Password: {password}")
            home_page.get_password().send_keys(password)
            self._log.info("Clicking the login button.")
            home_page.get_login_button().click()
        yield [home_page, user_data]
        # Log out the user
        with allure.step("Step 2: Logging out"):
            side_menu = SideMenu(self.driver)
            self._log.info(f"Logging out the user {user_name}.")
            side_menu.get_log_out_link().click()
            self.driver.delete_all_cookies()

    @pytest.fixture(scope = "function", params = MyFaker.customer_data_one_empty_field())
    def get_customer_data_negative(self, request) -> list[dict]:
        """
        Returns the fake customer data w/ one element missing (empty) in each dictionary.
        :return: List containing the dictionaries w/ generated user data.
        """
        return request.param

    @allure.parent_suite("Tests for Parabank application")
    @allure.suite("New user registration")
    @allure.sub_suite("TC 001-010")
    @allure.tag("Negative", "Smoke", "Registration")
    @allure.severity(allure.severity_level.CRITICAL)
    @allure.label("client", "Parasoft")
    @allure.label("owner", "Jaroslaw Puchala")
    def test_registration_negative(self, get_customer_data_negative):
        """
        Tests the customer registration w/ one empty field.
        :param get_customer_data_negative: Data generated by faker
        :return:
        """
        log = self.get_logger()
        self.driver.get(BasePage.HOME_PAGE)
        home_page = HomePage(self.driver)
        register_page = home_page.get_register_link()
        log.info(f"Testing the registration with empty {get_customer_data_negative["empty"]} field.")
        allure.dynamic.testcase(f"Test Case no {get_customer_data_negative["tc"]}")
        allure.dynamic.description(f"This test attempts to register the customer with empty"
                                   f" {get_customer_data_negative["empty"]} field.")
        first_name = get_customer_data_negative["firstname"]
        log.info(f"Entering the first name: {first_name}")
        register_page.get_first_name().send_keys(first_name)
        last_name = get_customer_data_negative["lastname"]
        log.info(f"Entering the last name: {last_name}")
        register_page.get_last_name().send_keys(last_name)
        address = get_customer_data_negative["address"]
        log.info(f"Entering the address: {address}")
        register_page.get_address_street().send_keys(address)
        city = get_customer_data_negative["city"]
        log.info(f"Entering the city: {city}")
        register_page.get_address_city().send_keys(city)
        state = get_customer_data_negative["state"]
        log.info(f"Entering the state: {state}")
        register_page.get_address_state().send_keys(state)
        post_code = get_customer_data_negative["postcode"]
        log.info(f"Entering the post code: {post_code}")
        register_page.get_address_post_code().send_keys(post_code)
        phone_number = get_customer_data_negative["phonenumber"]
        log.info(f"Entering the phone number: {phone_number}")
        register_page.get_phone_number().send_keys(phone_number)
        ssn = get_customer_data_negative["ssn"]
        log.info(f"Entering the PESEL: {ssn}")
        register_page.get_social_security_number().send_keys(ssn)
        user_name = get_customer_data_negative["username"]
        log.info(f"Entering the user name: {user_name}")
        register_page.get_username().send_keys(user_name)
        password = get_customer_data_negative["password"]
        log.info(f"Entering the password: {password}")
        register_page.get_password().send_keys(password)
        confirm_password = get_customer_data_negative["confirm"]
        log.info(f"Entering the confirm password: {confirm_password}")
        register_page.get_confirm_password().send_keys(confirm_password)
        log.info("Clicking the register button.")
        register_page.get_register_button().click()
        time.sleep(5)